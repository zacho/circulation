<?php
// $Id$
/* 
 * @file
 * circulation.module
 * Authored by Zac Howarth <zac at robertsstreet dot org> 
 * with help from Amanda Stevens <amanda at robertsstreet dot org>
 * Built for the purposes of managing zine circulation at the Anchor Archive 
 * Regional Zine Project <http://anchorarchive.robertsstreet.org>
 *
 * Updated to Drupal 6.x compat. by Chris Ritzo <chris.ritzo at gmail dot com>
 * for use with the Urbana Champaign Independent Media Center Library <library.ucimc.org>
 *
 * Version 6.x improved and expanded by Zac Howarth
 *
 * Updated to 7.x by Zac Howarth
 */

define('CIRCULATION_ITEMTYPE', variable_get('circulation_itemtype', NULL));
define('SECONDS_PER_DAY', 86400);

/********************************************************************
 * Drupal Hooks :: General Overview
 ********************************************************************/


/**
 * Implementation of hook_help().
 */
function circulation_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/settings/circulation':
      $output = '<p>'. t('To set up circulation, you must select one or more content types which will correspond to individual borrowable objects. ') .'</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function circulation_perm() {
  return array('access circulation', 'administer circulation', 'renew own items');
}

/**
* Implementation of hook_menu().
*/
function circulation_menu() {
  $items = array();
    
  $items['admin/settings/circulation'] = array(
    'title' => t('Circulation'),
    'description' => t('Change how Circulation functions'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('circulation_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['circulation'] = array(
    'title' => t('Circulation'),
    'description' => t('Current loan status'),
    'page callback' => 'circulation_loan_list',
    'access arguments' => array('access circulation'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['circulation/history'] = array(
     'title' => 'History',
     'page callback' => 'circulation_history', 
     'access arguments' => array('access circulation'),
     'type' => MENU_CALLBACK,
  );

  $items['circulation/checkin'] = array(
     'title' => 'Check In',
     'page callback' => 'circulation_checkin', 
     'access arguments' => array('access circulation'), 
     'type' => MENU_CALLBACK,
  );

  $items['circulation/checkout'] = array(
     'title' => 'Check Out',
     'page callback' => 'circulation_checkout', 
     'access arguments' => array('access circulation'),
     'type' => MENU_NORMAL_ITEM,
  );

  $items['circulation/renew'] = array(
     'title' => 'Renew',
     'page callback' => 'circulation_renew', 
     'access callback' => 'circulation_access_renew_item',
     //'access arguments' => array(array('access circulation', 'renew own items')), 
     //only single arguments to user_access
     'type' => MENU_CALLBACK,
  );

  $items['circulation/userholdings'] = array(
     'title' => 'User-Current Loans',
     'page callback' => 'circulation_userholdings', 
     'access arguments' => array('access circulation'), 
     'type' => MENU_CALLBACK,
  );

  $items['circulation/user_autocomplete'] = array(
     'title' => 'Better user autocomplete',
     'page callback' => 'circulation_user_autocomplete', 
     'access arguments' => array('access user profiles'), 
     'type' => MENU_CALLBACK,
  );

  $items['circulation/itemcode_autocomplete'] = array(
     'title' => 'Item code autocomplete',
     'page callback' => 'circulation_itemcode_autocomplete', 
     'access arguments' => array('access circulation'), 
     'type' => MENU_CALLBACK,
  );

  return $items;
}


function circulation_access_renew_item() {
  if( user_access( 'access circulation' ) || user_access( 'renew own items' ) ) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implementation of hook_settings().
 */

function circulation_settings() {

  $form = array();

  $form['circulation_itemtype'] = array(
    '#type' => 'radios',
    '#title' => t('Borrowable Content Types'),
    '#options' => node_get_types('names'),
    '#default_value' => variable_get('circulation_itemtype', NULL),
    '#description' => t('Select the nodetype which itemizes your bibliographic record type(s).  This field should select the type of content which can be loaned to users'),
  );
  
  $itemtype = CIRCULATION_ITEMTYPE;
  if ($itemtype != '') {
    $itemfields = db_query('SELECT f.field_name, f.label FROM {content_node_field_instance} f WHERE f.type_name = \'%s\'', $itemtype);
    
    while ($itemtypefields = db_fetch_object($itemfields)) {
      $options[$itemtypefields->field_name] = $itemtypefields->label;
    }
  
    $form['circulation_item_recordreference'] = array(
      '#type' => 'radios',
      '#title' => t('Bibliographic Reference field'),
      '#options' => $options,
      '#default_value' => variable_get('circulation_item_recordreference', NULL),
      '#description' => t('Which field in the <em>'. $itemtype .'</em> content type is a reference to a bibliographic record?'),
    );

  }

  $form['circulation_loans'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Loans'), 
    '#collapsible' => FALSE, 
    '#collapsed' => FALSE,
  );

  $form['circulation_loans']['circulation_loanperiod'] = array(
    '#type' => 'textfield',
    '#title' => t('Loan length'),
    '#size' => 4,
    '#default_value' => variable_get('circulation_loanperiod', 14),
    '#description' => t('The number of days for a standard loan'),
  );
  
  $form['circulation_loans']['circulation_renewalperiod'] = array(
    '#type' => 'textfield',
    '#title' => t('Renewal length'),
    '#size' => 4,
    '#default_value' => variable_get('circulation_renewalperiod', 7),
    '#description' => t('The number of days for a loan renewal. '),
  );

  $form['circulation_loans']['circulation_maxrenewals'] = array(
    '#type' => 'textfield',
    '#title' => t('Max Renewals'),
    '#size' => 4,
    '#default_value' => variable_get('circulation_maxrenewals', 3),
    '#description' => t('The maximum allowable number of renewals.'),
  );

  $form['circulation_loans']['circulation_notificationperiod'] = array(
    '#type' => 'textfield',
    '#title' => t('Notification interval'),
    '#size' => 4,
    '#default_value' => variable_get('circulation_notificationperiod', 7),
    '#description' => t('How often to notify users about overdue items (please don\'t set this to zero!).'),
  );

  $form['circulation_loans']['circulation_warningnotificationmessage'] = array(
    '#type' => 'textarea',
    '#title' => t('Warning Message'),
    '#rows' => 6,
    '#cols' => 60,
    '#default_value' => variable_get('circulation_warningnotificationmessage', 'The following item is due soon: [title]'),
    '#description' => t('Outgoing message to remind users of soon-due items.  <br/>You may use the following replacement strings: [title], [callnumber], [date], [duedate], [daysleft], and [website].'),
  );

  $form['circulation_loans']['circulation_latenotificationmessage'] = array(
    '#type' => 'textarea',
    '#title' => t('Overdue Message'),
    '#rows' => 6,
    '#cols' => 60,
    '#default_value' => variable_get('circulation_latenotificationmessage', 'The following item is overdue: [title]'),
    '#description' => t('Outgoing message for overdue email notifications.  <br/>You may use the following replacement strings: [title], [callnumber], [date], [duedate], and [website].'),
  );

  if (module_exists('profile')) {
    $profile_fields_result = db_query('SELECT * FROM {profile_fields} WHERE 1');
    while ($row = db_fetch_object ($profile_fields_result)) {
      $profile_field_options[$row->fid] = $row->title;
    }
    $form['circulation_profiles'] = array(
      '#type' => 'fieldset', 
      '#title' => t('Profile settings'), 
      '#collapsible' => FALSE, 
      '#collapsed' => FALSE,
    );
    $form['circulation_profiles']['circulation_profile_names'] = array(
      '#type' => 'checkboxes', 
      '#title' => t('Personal Name(s)'),
      '#description' => t('Please check the profile field (or fields) which correspond to first-name, last-name, personal name, etc. Doing so makes it easier to find user-IDs on the check-out form.'),
      '#options' => $profile_field_options,
      '#default_value' => variable_get('circulation_profile_names',array()),
    );
  }

  $form['circulation_use_nodeapi'] = array(
    '#type' => 'checkbox',
    '#title' => t('Embed circulation links directly in $node'),
    '#default_value' => variable_get('circulation_use_nodeapi',false),
    '#description' => t('If you check this box then circulation links (check in, check out, item history) will be embedded into the item records directly.  The nicer option is just to use the Circulation Node Status block which this module creates.'),
  );

  $form['array_filter'] = array('#type' => 'hidden');

  return system_settings_form($form);

}


/**
 * Implementation of hook_cron().
 */
function circulation_cron() {
//date_default_timezone_set(date_default_timezone());
  if(function_exists('messaging_message_send_user') ) {
    global $base_url;
    
    $overdue_items = _circulation_get_overdue_loans();
    $soondue_items = _circulation_get_soondue_loans();

    $now = date('U');
    $notification_threshold = date(
          "U",
          mktime(
            // Midnight:
            0, // hour
            0, // minute
            0, // second
            date("m"), // this month
            date("d")-variable_get('circulation_notificationperiod', 7),  // this day plus the loan period
            date("Y") // this year
          ));

    foreach( $soondue_items as $item ) {
      $notified = $item->notified;
      if ( empty($notified) || ($notified < $notification_threshold) ) {

        $account = user_load($item->uid);
        $itemcode  = get_node_title($item->nid);
        $zinenid   = get_item_parent($item->nid);
        $zinetitle = get_node_title($zinenid);
        $daysleft  = floor(($item->due - $now) / SECONDS_PER_DAY);

        $search = array(
            '[title]',
            '[callnumber]',
            '[daysleft]',
            '[duedate]',
            '[website]',
            '[date]',
        );
        $replace = array(
            $zinetitle,
            $itemcode,
            $daysleft,
            date('F jS, Y',$item->due),
            $base_url,
            date('Y-M-d'),
        );

        $message_body = variable_get('circulation_warningnotificationmessage', "The following item is overdue: [title]");
        $message_body = str_replace($search,$replace,$message_body);
        $message = array(
            'type' => 'simple',
            'subject' => variable_get('site_name','Library').' notice',
            'body' => $message_body,
        );

        messaging_message_send_user($account, $message, $method = NULL, $queue = 1);
        $update_sql = "UPDATE {circulation} SET `notified` = %d WHERE `cid` = %d AND `nid` = %d";
        db_query( $update_sql, $now, $item->cid, $item->nid );
      }
      else {
        // It's not time to send another message yet.
      }
    }

    // prior to becoming late, users will have received soon-due notifications.
    // therefore, we must not only look for circulation entries with notified
    // values more than $notification_threshold days old, but also those that are
    // earlier than the due date.
    foreach( $overdue_items as $item ) {
      $notified = $item->notified;
      if ( empty($notified) || (($notified < $notification_threshold) && ($notified < $item->due)) ) {

        $account = user_load($item->uid);
        $itemcode  = get_node_title($item->nid);
        $zinenid   = get_item_parent($item->nid);
        $zinetitle = get_node_title($zinenid);

        $search = array(
            '[title]',
            '[callnumber]',
            '[duedate]',
            '[website]',
            '[date]',
        );
        $replace = array(
            $zinetitle,
            $itemcode,
            date('F jS, Y',$item->due),
            $base_url,
            date('Y-M-d'),
        );

        $message_body = variable_get('circulation_latenotificationmessage', "The following item is overdue: [title]");
        $message_body = str_replace($search,$replace,$message_body);
        $message = array(
            'type' => 'simple',
            'subject' => variable_get('site_name','Library').' notice',
            'body' => $message_body,
        );

        messaging_message_send_user($account, $message, $method = NULL, $queue = 1);
        $update_sql = "UPDATE {circulation} SET `notified` = %d WHERE `cid` = %d AND `nid` = %d";
        db_query( $update_sql, $now, $item->cid, $item->nid );
      }
      else {
        // It's not time to send another message yet.
      }
    }

  }
  else {
    // no messaging api, don't send messages.
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function circulation_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'view':
      global $user;
      
      if ($teaser) {
        break;
      } 
      
      if ($node->type != CIRCULATION_ITEMTYPE) {
        break;
      }

      if ( ! variable_get('circulation_use_nodeapi',false)) {
        break;
      }
          
      $nid = $node->nid;
      $node->content['circulation_form'] = array(
        '#value' => drupal_get_form('circulation_node_form', $nid),
        '#weight' => 50,
      );
      break;


    // Adds a notice following item insertion reminding cataloguers to label the the zine
    case 'insert':
      $type = variable_get('circulation_itemtype', NULL);
      if ( $node->type == $type ) {
        $message = "The code for your new Item is: <em>". l($node->title, 'node/'. $node->nid) ."</em>.  Don't forget to label it!";
        drupal_set_message(t($message));
        //db_query("UPDATE {unique_number} SET num = num+1 WHERE type='item'");
      }
  }
}

function circulation_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      // If $op is "list", we just need to return a list of block descriptions.
      // This is used to provide a list of possible blocks to the administrator,
      // end users will not see these descriptions.
    
      $blocks[0] = array(
        'info' => t('Circulation Node Status'),
        'cache' => BLOCK_NO_CACHE,
      );
      return $blocks;
    
    case 'configure':
      break;
    
    case 'save':
      break;
    
    case 'view':
      switch ($delta) {
        case 0:

          if (arg(0) == 'node' && is_numeric(arg(1))) {
            $nid = arg(1);
            $node = node_load(array('nid' => $nid));

            if ($node->type != CIRCULATION_ITEMTYPE) {
              break;
            }
    
          } else {
            break;
          }
          // The subject is displayed at the top of the block. Note that it
          // should be passed through t() for translation.
          $block['subject'] = t('Circulation Status');
          // The content of the block is typically generated by calling a custom
          // function.
          $block['content'] = drupal_get_form('circulation_node_block_form',$nid);
          break;

      }
      return $block;    
  }
}

/**
 * Define a block that shows the current node's circulation status, if applicable.
 */
function circulation_node_block_form($form_state, $nid) {

  $access = user_access('access circulation');
  $status = db_result(db_query("SELECT COUNT(*) FROM {circulation} WHERE `nid` = %d AND `checkin` IS NULL", $nid));

  if ($status) {
    $form['circulation_item_status'] = array(
      '#title' => t('Status'),
      '#value' => '<h3 class="circulation_status">'.t('Out').'</h3>',
    );
    $form['circulation_item_checkin'] = array( 
      '#value' => l(t('Check In Now'), 'circulation/checkin/'. $nid, array('title' => t('Return Item Now'), 'class' => 'fake-btn')),
      '#suffix' => '<br />',
    );
  } 
  else {
    $form['circulation_item_status'] = array(
      '#title' => t('Status'),
      '#value' => '<h3 class="circulation_status">'.t('In').'</h3>',
    );    
    $form['circulation_item_checkout'] = array(
      '#value' => l(t('Check Out Now'), 'circulation/checkout/'. $nid, array('title' => t('Issue this item now'), 'class' => 'fake-btn')),
      '#suffix' => '<br />',
    );
  }

  $form['circulation_item_history'] = array(
    '#value' => l(t('View Item History'), 'circulation/history/'. $nid, array('title' => t('View the circulation history of this item'), 'class' => 'fake-btn')),
  );  
  
  return $form;

}

/**
 * Define the form for viewing item inventory in a bibliographic record
 */
function circulation_node_form($form_state, $nid) {

  $access = user_access('access circulation');
  $form['circulation'] = array(
    '#type' => 'fieldset',
    '#title' => t('Circulation'),
    '#weight' => 10,
    '#access' => $access
  );

  $form['circulation']['history'] = array(
    '#value' => l(t('Item History'), 'circulation/history/'. $nid, array(
      'attributes' => array(
        'title' => t('View the circulation history of this item'), 
        'class' => 'fake-btn',
      ),
    )),
    '#suffix' => '&nbsp;&nbsp;|&nbsp;&nbsp;',
  );
  $status = _circulation_count_checkouts_by_nid($nid);
  $destination = drupal_get_destination();
  if (!$status) {
    $form['circulation']['checkout'] = array(
      '#value' => l(t('Check Out'), 'circulation/checkout/'. $nid, array(
        'attributes' => array(
          'title' => t('Issue this item now'), 
          'class' => 'fake-btn',
        ),
      )),
    );
  } 
  else {
    $cid = _circulation_get_cid( $nid );
    $form['circulation']['renew'] = array(
      '#value' => l(t('Renew'), 'circulation/renew/'. $cid, array(
        'attributes' => array(
          'title' => t('Renew Loan'), 
          'class' => 'fake-btn',
         ),
         'query' => $destination,
      )),
    '#suffix' => '&nbsp;&nbsp;|&nbsp;&nbsp;',
    );
    $form['circulation']['checkin'] = array(
      '#value' => l(t('Check In'), 'circulation/checkin/'. $nid, array(
        'attributes' => array(
          'title' => t('Return Item Now'), 
          'class' => 'fake-btn',
         ),
      )),
    );
  }
  return $form;
}




/**
 * Implementation of hook_user().
 *
 * Provides signature customization for the user's comments.
 */
function circulation_user($op, $edit, &$account, $category = NULL) {

  // if ($op == 'view') {
  //   $account->content['circulation_form'] = array(
  //     '#type' => 'circulation_table'
  //     '#value' => drupal_get_form('circulation_userholdings',$account->uid),
  //     '#weight' => 20,
  //   );
  // }


  if ($op == 'view') {
  global $user;
    $access = ($user->uid == $account->uid OR user_access('access circulation'));
    if ($user->uid && $access) {
      $account->content['circulation_list'] = array(
        '#title' => 'Loans',
        '#value' => circulation_userholdings($account->uid),
        '#class' => 'last',
        '#type'  => 'markup',
        '#weight' => 30,
      );
      if (user_access('access circulation')) {
        $account->content['circulation_checkout'] = array(
          '#title' => 'New Loan',
          '#value' => l(t('Check Out Item'), 'circulation/checkout/0/'. $account->uid, array('title' => t('Issue a loan to this user now'), 'class' => 'fake-btn')),
          '#type'  => 'markup',
          '#weight' => 31,
        );
      }
      // return array(t('Circulation') => $items);
    } // end if user...
  }

}



function _circulation_go_home($message, $url = null) {
  global $user;

  if( empty( $url ) || $url == 'circulation' ) {
    if(user_access('administer circulation')) {
      $url = 'circulation';
    }
    elseif( !empty( $user->uid ) ) {
      $url = 'user/'.$user->uid;
    } else {
      $url = '<front>';
    }
  }

  drupal_set_message($message);
  drupal_goto($url);
}

function _circulation_get_renewals( $cid ) {
  return db_result( db_query( "SELECT `renewals` FROM {circulation} WHERE `cid` = %d", $cid ) );
}

function _circulation_get_nid( $cid ) {
  return db_result( db_query( "SELECT `nid` FROM {circulation} WHERE `cid` = %d", $cid ) );
}

function _circulation_get_cid( $nid ) {
  return db_result( db_query( "SELECT `cid` FROM {circulation} WHERE `nid` = %d AND `checkin` IS NULL ORDER BY `cid` DESC LIMIT 1", $nid ) );
}

function _circulation_count_checkouts_by_nid( $nid ) {
  return db_result( db_query( "SELECT COUNT(*) FROM {circulation} WHERE `nid` = %d AND `checkin` IS NULL", $nid ) );
}

function _circulation_get_due_date( $cid ) {
  return db_result( db_query( "SELECT `due` FROM {circulation} WHERE `cid` = %d", $cid ) );
}

/**
 * return a data structure of overdue loan entries
 *
 * @return
 *    array of objects, where each contains all database fields
 */
function _circulation_get_overdue_loans() {
//date_default_timezone_set(date_default_timezone());
  $overdue_sql = "SELECT * FROM {circulation} WHERE `due` < %d AND `checkin` IS NULL";
  $overdue_res = db_query( $overdue_sql, date('U')+SECONDS_PER_DAY );
  // use SECONDS_PER_DAY because we'd like to wait 'till they're a day late to send messages
  $output = array();
  while( $row = db_fetch_object( $overdue_res ) ) {
    $output[] = $row;
  }
  return $output;
}

function _circulation_get_soondue_loans() {
//date_default_timezone_set(date_default_timezone());
  $output = array();
  if( variable_get('circulation_renewalperiod', 7) > 0 ) {
    $notification_period = SECONDS_PER_DAY * variable_get('circulation_notificationperiod', 7);
    $overdue_sql = "SELECT * FROM `circulation` WHERE `due`-%d < %d AND `due` > %d AND `checkin` IS NULL";
    $overdue_res = db_query( $overdue_sql, $notification_period, date('U'), date('U') );
    while( $row = db_fetch_object( $overdue_res ) ) {
      $output[] = $row;
    }
  }
  return $output;
}

function circulation_checkin($nid, $confirm = NULL) {
  
//date_default_timezone_set(date_default_timezone());
  if (!$nid OR !is_numeric($nid)) {
    _circulation_go_home(t('Node ID not supplied or invalid.'));
    break;
  }

  if ($confirm != 'confirm') {

    // Verify nid, generate confirm URL and form.
    $count = _circulation_count_checkouts_by_nid($nid);
    if ($count > 0) {
      drupal_set_title(t('Confirm Check-in'));
      return "You want to set item ". get_node_title($nid) ." (". get_node_title(get_item_parent($nid)) .") as returned, Correct?  " .
             l('Proceed', 'circulation/checkin/'. $nid ."/confirm", array('title' => t('Proceed with item check-in'), 'class' => 'fake-btn'));
    } 
    else {
      _circulation_go_home(t('Node @nid (@name) cannot be checked in because it is not checked out.', array('@nid' => $nid, '@name' => get_node_title($nid))));
    }
    
  }
  else {
    // This is it, do the query, the forward to item
    $checkinsql = "UPDATE {circulation} SET `checkin` = '%s' WHERE `nid` = %d AND `checkin` IS NULL";
    if (db_query($checkinsql, date("U"), $nid)) {
      //SUCCESS
      _circulation_go_home(t('Item successfully checked-in.'), 'circulation');
    }
    else {
      //FAILURE
      _circulation_go_home(t('Database UPDATE command failed.'), 'node/'. $nid);
    }
  }
  
}

/**
 * Checks out an item.
 * 
 * @param $nid
 *   A numeric node-id.
 *
 * @param $uid
 *   A numeric user-id.
 *
 * @return
 *   The checkout form, which is a simple link to the checkout page with
 *   certain values pre-populated.
 */
function circulation_checkout($nid=0, $uid=0) {
  if ($nid AND !$uid) {
    // Node indicated, select user
    // need a form: circulation_checkout
    $output  = t('Enter the username of the borrower and the item code of the zine');
    $output .= drupal_get_form('checkout_user_form', array('nid' => $nid));

  } 
  elseif (!$nid AND $uid) {
    // User indicated, Select node
    $output  = t('Enter the username of the borrower and the item code of the zine');
    $output .= drupal_get_form('checkout_user_form', array('uid' => $uid));

  } 
  elseif ($nid AND $uid) {
    // Both indicated
    $output  = t('Enter the username of the borrower and the item code of the zine');
    $output .= drupal_get_form('checkout_user_form', array('uid' => $uid, 'nid' => $nid));

  } 
  else {

    // NOTHIGN INDICATED
    $output  = t('Enter the username of the borrower and the item code of the zine');
    $output .= drupal_get_form('checkout_user_form');

  }
  drupal_set_title(t('Check Out Item'));
  return $output;
}

function checkout_user_form($form_state, $args = array()) {
  $form['user_name'] = array(
    '#title' => t('Borrower Username'),
    '#type' => 'textfield',
    '#description' => t('Enter the borrower\'s username.'),
    '#autocomplete_path' => 'circulation/user_autocomplete',
    '#size' => 60,
  );
  if (isset($args['uid'])) {
    $uname = get_user_name($args['uid']);
    if ($uname) {
      $form['user_name']['#default_value'] = $uname;
    }
  }
  $form['item_code'] = array(
    '#title' => t('Item to be Loaned'),
    '#type' => 'textfield',
    '#description' => t('Enter the title or call number of the item being loaned.'),
    '#autocomplete_path' => 'circulation/itemcode_autocomplete',
    '#size' => 60,
  );
  if (isset($args['nid'])) {
    $icode = db_result(db_query("SELECT title FROM {node} WHERE `type` = '%s' AND `nid` = '%s'",  CIRCULATION_ITEMTYPE, $args['nid']));
    if ($icode) {
      $form['item_code']['#default_value'] = $icode;
    }
  }
/*  $form['preview'] = array(
    '#type' => 'button',
    '#value' => t('Preview')
  );
*/
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  );
  return $form;
}

/* Changes to form validate functions in drupal v6.x
 * function my_form_validate($form, &$form_state) {
 * // validation code goes here...
 * if ($form_state['values']['name']) {
 *   // etc. ...
 * }
 * }
*/
function checkout_user_form_validate($form, &$form_state) {
  if (!$form_state['values']['user_name']) {
    form_set_error('user_name', t('Invalid username'));
  }
  $count = db_result(db_query("SELECT COUNT(*) FROM {users} WHERE `name` = '%s'", $form_state['values']['user_name']));
  if ($count != 1) {
    form_set_error('user_name', t('Invalid username'));
  }
  if (!$form_state['values']['item_code']) {
    form_set_error('item_code', t('Invalid item code'));
  }
  $count = db_result(db_query("SELECT COUNT(*) FROM {node} WHERE `type` = '%s' AND `title` = '%s'", CIRCULATION_ITEMTYPE, $form_state['values']['item_code']));
  if ($count != 1) {
    form_set_error('item_code', t('Invalid item code: '. $form_state['values']['item_code']));
  }
  $count = db_result(db_query("SELECT COUNT(*) FROM {circulation} WHERE `nid` = %d AND `checkin` IS NULL", get_item_nid_from_title($form_state['values']['item_code'])));
  if ($count > 0) {
    form_set_error('item_code', t('Sorry, records indicate that item is already on loan'));
  }
}

function checkout_user_form_submit($form, &$form_state) {
//date_default_timezone_set(date_default_timezone());
  $uid = get_uid($form_state['values']['user_name']);
  $nid = get_item_nid_from_title($form_state['values']['item_code']);
  $loan_period = variable_get('circulation_loanperiod', 14);
  if (is_numeric($uid) AND is_numeric($nid)) {
    if (db_query("INSERT INTO {circulation} (uid, nid, checkout, due) VALUES ('%s', '%s', '%s', '%s')",
        $uid, 
        $nid, 
        date("U"), 
        date(
          "U", 
          mktime( 
            // Midnight:
            0, // hour
            0, // minute
            0, // second
            date("m"), // this month
            date("d")+variable_get('circulation_loanperiod', $loan_period),  // this day plus the loan period
            date("Y") // this year
          ))))
      { // if query successful, then:
        _circulation_go_home(
          t('Successfully issued item <i>%code</i> to user <i>%name</i>',array(
            '%code' => $form_state['values']['item_code'], 
            '%name' => $form_state['values']['user_name'], 
            '%nid' => $nid, 
            '%uid' => $uid)
          ),
          "user/$uid");
    }
  }
  _circulation_go_home(t('You would issue item <i>%code</i> to user <i>%name</i>', array('%code' => $form_state['values']['item_code'], '%name' => $form_state['values']['user_name'])));
}

/**
 * Renews a checked-out item.
 *
 * The rules are roughly: you can't renew an overdue item, 
 *   and you can only renew a certain number of times.
 * 
 * @param $cid
 *   A numeric circulation-id.
 *
 * @return
 *   The checkout form, which is a simple link to the checkout page with
 *   certain values pre-populated.
 */
function circulation_renew( $cid=0, $confirm = NULL ) {
//date_default_timezone_set(date_default_timezone());
  if (!empty( $cid )) {

    // build the renewal due date
    $renewal_period = variable_get('circulation_renewalperiod', 7);
    $new_duedate = date(
                     "U", 
                     mktime( 
                     // Midnight:
                     0, // hour
                     0, // minute
                     0, // second
                     date("m"), // this month
                     date("d")+$renewal_period,  // this day plus the renewal period
                     date("Y") // this year
                   ));

    // make sure the renewal won't make it due sooner than it currently is
    $old_duedate = _circulation_get_due_date( $cid );
    if( $new_duedate <= $old_duedate ) {
      _circulation_go_home( t( 'The current loan lasts at least as long as an extension would, so we\'re doing nothing.' ) );
    }

    // make sure the thing isn't already overdue
    if( date('U') > $old_duedate ) {
      _circulation_go_home( t('Can\'t renew overdue items') );
    }

    // Verify cid, generate confirmation URL and form.
    $renewals   = _circulation_get_renewals( $cid );
    $nid        = _circulation_get_nid( $cid );
    $checkedout = _circulation_count_checkouts_by_nid( $nid );

    if ($confirm != 'confirm') {
    
      // check for a destination
      if (isset( $_REQUEST['destination'] )) {
        $destination = drupal_get_destination($_REQUEST['destination']);
      }
      
      // check number of renewals
      if ( $renewals >= variable_get( 'circulation_maxrenewals', 3 ) ) {
        _circulation_go_home( t('You can only renew items '.variable_get( 'circulation_maxrenewals', 3 ).' times.') );
      }

      if ($checkedout > 0 ) {
        drupal_set_title(t('Confirm Renewal'));
        return "Renew loan on item ". get_node_title($nid) ." (". get_node_title(get_item_parent($nid)) .") for ". 
          variable_get( 'circulation_renewalperiod', 7 )." days?  ".
          l('Confirm', 'circulation/renew/'. $cid ."/confirm", array('query' => $destination, 'title' => t('Proceed with renewal'), 'class' => 'fake-btn'));
      } // valid circulation record
      else {
        _circulation_go_home(t('Invalid circulation record @cid.', array('@cid' => $cid)));
      }
    
    }
    else {      
      // update due date and increment #renewals
      $renewals++;
      $renewsql = "UPDATE {circulation} SET `due` = '%s', `renewals` = %d WHERE `cid` = %d AND `checkin` IS NULL";
      if (db_query($renewsql, $new_duedate, $renewals, $cid)) {
        //SUCCESS
        _circulation_go_home(t('Loan renewed.'), 'circulation');
      }
      else {
        //FAILURE
        _circulation_go_home(t('Renewal failed.'), 'node/'. $nid);
      }
    }
  }
  else {
    _circulation_go_home(t('Circulation ID not supplied or invalid.'));
    break;
  }
}


function circulation_userholdings($nid = null) {
  return "<h3>" . t('Loans') . "</h3>" . circulation_userholdings_table($nid);
}

function circulation_userholdings_table($uid = NULL) {
//date_default_timezone_set(date_default_timezone());
  $header = array(t('Item Code'), t('Title'), t('Checkout'), t('Due'));
  $rows   = array();
  $count = 0;
  $access = user_access('access circulation');
  if( circulation_access_renew_item() ) {
    $header[] = t('Renewals');
    $destination = drupal_get_destination();
  }
  if ($access) {
    $header[] = t('Return');
  }
  
  if (is_numeric($uid)) {
    $userholdingsql = "SELECT * FROM {circulation} WHERE `uid` = %d AND `checkin` IS NULL";
    $userholdingres = db_query($userholdingsql, $uid);
    while ($sqresultrow = db_fetch_object($userholdingres)) {
      $itemduedateclass = "date";
      if (date('U') > $sqresultrow->due) {
      $itemduedateclass .= " overdue"; }
      $itemcode  = get_node_title($sqresultrow->nid);
      $zinenid   = get_item_parent($sqresultrow->nid);
      $zinetitle = get_node_title($zinenid);
      $rows[$count] = array(
        l($itemcode, 'node/'. $sqresultrow->nid),
        l($zinetitle, 'node/'. $zinenid),
        '<span class=\'date\'>'. date('j-M-y', $sqresultrow->checkout) .'</span>',
        '<span class=\''. $itemduedateclass .'\'>'. date('j-M-y', $sqresultrow->due) .'</span>',
      );
      if( circulation_access_renew_item() ) {
        $num_renewals = $sqresultrow->renewals;
        $renew_prefix = '';

        //if( $num_renewals > 0 ) 
        //  $renew_prefix = '('.$num_renewals.') ';

        if( $num_renewals < variable_get( 'circulation_maxrenewals', 3 ) && date('U') <= $sqresultrow->due) {
          $rows[$count][] = $renew_prefix . l(t('Renew'), 'circulation/renew/'. $sqresultrow->cid, 
            array('query' => $destination, 'title' => t('Renew Loan'), 'class' => 'fake-btn'));
        } 
        else {
          $rows[$count][] = $renew_prefix . t('Cannot Renew');  
        }

      }
      if ($access) {
        $rows[$count][] = l('Check In', 'circulation/checkin/'. $sqresultrow->nid, array('title' => t('Return Item Now'), 'class' => 'fake-btn'));
      }
      $count++;
    }
  }
  if ($count)
    return theme('table', $header, $rows);
  else
    return "<div>" . t('No loans') . "</div>";
}

function circulation_history($nid = NULL) {
  
//date_default_timezone_set(date_default_timezone());
  $header = array(t('Title'), t('Borrower'), t('Checkout'), t('Due'));
  $rows   = array();
  $count = 0;
  
  if (is_numeric($nid)) {
    // Only query a certain node-id
    $alloutsql = "SELECT * FROM {circulation} WHERE `nid` = %d ORDER BY `checkout` DESC";
    $alloutres = db_query($alloutsql, $nid);
    $header[] = t('Return Date');

    while ($sqresultrow = db_fetch_object($alloutres)) {
      $itemcode  = get_node_title($sqresultrow->nid);
      $zinenid   = get_item_parent($sqresultrow->nid);
      $zinetitle = get_node_title($zinenid);
      $username  = get_user_name($sqresultrow->uid);
      $rows[$count] = array(
                    l($zinetitle, 'node/'. $zinenid),
                    l($username, 'user/'. $sqresultrow->uid),
                    '<span class=\'date\'>'. date('j-M-y', $sqresultrow->checkout) .'</span>',
                    '<span class=\'date\'>'. date('j-M-y', $sqresultrow->due) .'</span>',
      );
      drupal_set_title(t('Item Circulation History: '. $itemcode));
      if ($sqresultrow->checkin) {
        $rows[$count][] = date('j M Y', $sqresultrow->checkin);
      } 
      else {
        $rows[$count][] = l('Check In Now', 'circulation/checkin/'. $sqresultrow->nid, array('title' => t('Return Item Now'), 'class' => 'fake-btn'));
      }
      $count++;
    }
  }
  return theme('table', $header, $rows);
}


/*
 * function that makes output for when /circulation or /circulation/[nid] is requested
 */
//function circulation_loan_list($arg1 = null, $arg2 = null, $arg3 = null, $arg4 = null) {
function circulation_loan_list($nid = null) {

//date_default_timezone_set(date_default_timezone());
  $header = array(t('Call Number'), t('Title'), t('Borrower'), t('Checkout'), t('Due'));
  $rows   = array();
  $count = 0;

  if ($nid == NULL or !is_numeric($nid)) {
    // Query all items
    $alloutsql = "SELECT * FROM {circulation} WHERE `checkin` IS NULL ORDER BY `due` ASC";
    $alloutres = db_query($alloutsql);
    $header[] = t('Renewals');
    $header[] = t('History');
    $header[] = t('Return');

    while ($sqresultrow = db_fetch_object($alloutres)) {
      $itemduedateclass = "date";
      if (date('U') > $sqresultrow->due) { 
      $itemduedateclass .= " overdue";}
      $itemcode  = get_node_title($sqresultrow->nid);
      $zinenid   = get_item_parent($sqresultrow->nid);
      $zinetitle = truncate_utf8(get_node_title($zinenid), 25, false, true);
      $username  = get_user_name($sqresultrow->uid);
      
      //Add row to table
      $rows[$count] = array(
                    l($itemcode, 'node/'. $sqresultrow->nid),
                    l($zinetitle, 'node/'. $zinenid),
                    l($username, 'user/'. $sqresultrow->uid),
                    '<span class=\'date\'>'. date('d-M-y', $sqresultrow->checkout) .'</date>',
                    '<span class=\''. $itemduedateclass .'\'>'. date('d-M-y', $sqresultrow->due) .'</date>',
      );
      drupal_set_title(t('Circulation'));
      $destination = drupal_get_destination();
      $num_renewals = $sqresultrow->renewals;
      $renew_prefix = '';

      //if( $num_renewals > 0 ) 
      //  $renew_prefix = '('.$num_renewals.') ';

      if( $num_renewals < variable_get( 'circulation_maxrenewals', 3 ) && date('U') <= $sqresultrow->due ) {
        $rows[$count][] = $renew_prefix . l(t('Renew'), 'circulation/renew/'. $sqresultrow->cid, 
          array('query' => $destination, 'title' => t('Renew Loan'), 'class' => 'fake-btn'));
      } 
      else {
        $rows[$count][] = $renew_prefix . t('Cannot Renew');  
      }
      
      $rows[$count][] = l(t('View All'), 'circulation/history/'. $sqresultrow->nid, array('title' => t('View circulation history for this item')));
      $rows[$count][] = l(t('Check In'), 'circulation/checkin/'. $sqresultrow->nid, array('title' => t('Return Item Now'), 'class' => 'fake-btn'));
      $count++;
    }
  } 
  else {
    // forward off to item history
    drupal_goto('circulation/history/'.$nid);
  }
  
  $output = theme('table', $header, $rows);
  $output .= "<div><p><br />";
  $output .= l(t('New Check Out'), 'circulation/checkout/', array('title' => t('Issue a new loan'), 'class' => 'fake-btn'));
  $output .= "</p></div>";
  return $output;

}


/**
 * Retrieve a pipe delimited string of autocomplete suggestions for circulating items
 */
function circulation_itemcode_autocomplete($string = '') {
  $matches = array();
  $item_biblioref = variable_get('circulation_item_recordreference', NULL) ."_nid";
  if ($string) {
    $result = db_query_range("SELECT n.title, z.title as ztitle FROM {node} n INNER JOIN {content_type_%s} c ON n.`nid`=c.`nid` LEFT JOIN {node} z ON c.%s=z.`nid` WHERE n.`type` = '%s' AND (LOWER(n.`title`) LIKE LOWER('%%%s%%') OR LOWER(z.`title`) LIKE LOWER('%%%s%%'))", CIRCULATION_ITEMTYPE, $item_biblioref, CIRCULATION_ITEMTYPE, $string, $string, 0, 15);
    while ($item = db_fetch_object($result)) {
      $matches[$item->title] = check_plain($item->title .' ('. $item->ztitle . ')');
    }
  }
  print drupal_json($matches);
}

/**
 * Retrieve a pipe delimited string of autocomplete suggestions for existing users
 */
function circulation_user_autocomplete($string = '') {
  $matches = array();
  if ($string) {
    $profile_names = variable_get('circulation_profile_names',null);
    if (module_exists('profile') && !empty($profile_names)) {
      $result = db_query_range("SELECT u.`name`, p.`value` FROM {users} u LEFT JOIN {profile_values} p ON u.`uid` = p.`uid` WHERE LOWER( u.`name` ) LIKE LOWER('%%%s%%') OR LOWER( p.`value` ) LIKE LOWER('%%%s%%')", $string, $string, 0, 10);
      while ($user = db_fetch_object($result)) {
        $matches[$user->name] = check_plain($user->name . ' (' . $user->value . ')' );
      }
    } else {
      $result = db_query_range("SELECT name FROM {users} WHERE LOWER(name) LIKE LOWER('%%%s%%')", $string, 0, 10);
      while ($user = db_fetch_object($result)) {
        $matches[$user->name] = check_plain($user->name);
      }
    }
  }

  drupal_json($matches);
}


// This function does something obvious, which is probably already accomplished in Drupal but
// I haven't bothered to look where.
function get_node_title($nid) {
  if (is_numeric($nid)) {
    return db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $nid));
  } 
  else {
    return NULL;
  }
}

function get_item_parent($nid) {
  $itemfield = variable_get('circulation_item_recordreference', NULL);
  $itemtype = CIRCULATION_ITEMTYPE;
  if (is_numeric($nid) AND $itemfield AND $itemtype) {
    return db_result(db_query("SELECT %s_nid FROM {content_type_%s} WHERE `nid` = %d", $itemfield, $itemtype, $nid));
  }
  else {
    return NULL;
  }
}

function get_user_name($uid) {
  if (is_numeric($uid)) {
    return db_result(db_query("SELECT name FROM {users} WHERE `uid` = %d", $uid));
  } 
  else {
    return NULL;
  }
}

function get_uid($uname) {
  if ($uname) {
    return db_result(db_query("SELECT uid FROM {users} WHERE `name` = '%s'", $uname));
  } 
  else {
    return NULL;
  }
}

function get_item_code($nid) {
  if ($nid) {
    return db_result(db_query("SELECT title FROM {node} WHERE `nid` = %d", $nid));
  } 
  else {
    return NULL;
  }
}

function get_item_nid_from_title($title) {
  if ($title) {
    return db_result(db_query("SELECT nid FROM {node} WHERE `title` = '%s'", $title));
  } 
  else {
    return NULL;
  }
}

function circulation_get_item_status($nid) {
//date_default_timezone_set(date_default_timezone());
  $query = "SELECT c.* FROM {circulation} c WHERE c.`nid` = '%d' AND c.`checkin` IS NULL ORDER BY c.`checkout` DESC LIMIT 1";
  $result = db_query($query,$nid);
  if ($row = db_fetch_object($result)) {
    // 86400 seconds = 24 hours
    // if the due date + 1 day is less than now:
    if (SECONDS_PER_DAY + $row->due  <  date("U")) {
      // then the item is late:
      $return = array('late',$row->due);
    } else {
      // otherwise the item is just out:
      $return = array('out',$row->due);
    }
  } else {
    // if there were no rows in the result, then the item is in:
    $return = array('in');
  }
  return $return;
}


/*
 * Function to retrieve circulation data regarding all current loans for a given user.
 *
 * Returns a database query result $result or null if no user id is supplied.
 *  (If a bad user id is supplied, $result will simply contain an empty database result.
 */
/*
function get_circ_user($uid) {
  if (is_numeric($uid)) {
    $query = "SELECT * FROM {circulation} WHERE `uid` = '%d' `checkin` IS NULL";
    $result = db_query($query, $uid);
    return $result;
  } 
  else {
    return NULL;
  }
}
*/

/*
 * Function to retrieve the current circulation status of a single drupal node (item)
 * 
 * Returns 
 */
/*
function get_circ_item($nid) {
  if (is_numeric($nid)) {
    // Query limited to a single result, the most recent result.
    $query = "SELECT * FROM {circulation} WHERE `nid` = '%d' AND `checkin` IS NULL ORDER BY `checkout` DESC";
    //$query = "SELECT c.* FROM {circulation} c WHERE c.`nid` = '%d' AND c.`checkin` IS NULL ORDER BY c.`checkout` DESC LIMIT 1";
    $result = db_query_range($squery, $nid, 1);
    if ($sqresultrow = db_fetch_object($sqresult)) {
      return $sqresultrow;
    } 
    else {
      return NULL;
      // Redundant?
    }
  } 
  else {
    return NULL;
  }
}
*/

/*
function circulation_user_form_table(&$form) {
  $content = '<table>';
  foreach ($form as $key => $value) {
    $tmp = drupal_render($form[$key]);
    $tmp = preg_replace('|</label>|i', '</label></td><td>', $tmp, 1);
    $content .= '<tr><td>'.$tmp.'</td></tr>';
  }
  $content .= '</table>';
  return $content;
}
*/
